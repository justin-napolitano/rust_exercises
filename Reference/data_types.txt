Scalar Types {
  Integer {
    Signed {
      i8,
      i16,
      i32,
      i64,
      i128,
      isize;
      }
    }
    Unsigned {
      u8,
      u16,
      u32,
      u64,
      u128,
      usize;
    }
    Invocation {
      let x = 3
      let x : u32 = -3
    }
    Literals Can be Written as {
      Decimal	98_222,
      Hex	0xff,
      Octal	0o77,
      Binary	0b1111_0000,
      Byte (u8 only)	b'A';
    }
  Floating Point{
    Default {
      f64
    }
  }
    Possible {
      f32,
      f64;
    }
    Invocation {
      let x = 2.0; // f64
      let y: f32 = 3.0; // f32
    }
  Boolean{
    Invocation{
      let t = true;
      let f: bool = false; // with explicit type annotation
    }
  }
  Character{
    Invocation {
      let c = 'z';
      let z = 'â„¤';
      let heart_eyed_cat = 'ðŸ˜»';
    }
  }
    Legal Characters {
      Any U8 Character
    }
}



Compound Types {
    tuples: immutable {
      Instantiation {
        let tup: (i32, f64, u8) = (500, 6.4, 1);
      }
      Indexing Items {
        Multiple Variables {
          let tup = (500, 6.4, 1);

          let (x, y, z) = tup;
        }
        Individual Variables {
          let x: (i32, f64, u8) = (500, 6.4, 1);

          let five_hundred = x.0;

          let six_point_four = x.1;

          let one = x.2;
        }
      }
    }

    Array: immutable {
      Instantiation {
        let a = [1, 2, 3, 4, 5];

        let a: [i32; 5] = [1, 2, 3, 4, 5];

        let a = [3; 5];
          = let a = [3, 3, 3, 3, 3];
      }
      Indexing {
        let a = [1, 2, 3, 4, 5];

        let first = a[0];
        let second = a[1];
      }
    }
    Vectors: mutable {
    }
}

Numeric Operations {
  let sum = 5 + 10;

  // subtraction
    let difference = 95.5 - 4.3;

  // multiplication
    let product = 4 * 30;

  // division
    let quotient = 56.7 / 32.2;

  // remainder
    let remainder = 43 % 5;
}

The String Type {
  //Instantiation
    //immutable
      let s = String::from("hello");
    //mutable
      let mut s = String::from("hello");
}
